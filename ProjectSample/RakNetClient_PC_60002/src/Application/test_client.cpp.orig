#include "NetworkModule/network_interface.h"
#include "NetworkModule/user_message_identify.h"
#include <unistd.h>
#include <pthread.h>
#include <stdio.h>
#include <iostream>

using namespace std;

pthread_t stop_pid;

void send_callback(const char* ip, int port, unsigned char* data, int size)
{
    remove_callback(ID_USER_MESSAGE_TEST);
    printf("ip is %s\n", ip);
    printf("port is %d\n", port);
    printf("data is %s\n", (char*)data);
    printf("size is %d\n", size);
}

void peer_shutdown_callback(const char* ip, int port, unsigned char* data, int size)
{
    printf("shut down\n");
}

void peer_exception_callback(const char* ip, int port, unsigned char* data, int size)
{
    printf("exception\n");
}

void conn_succ_callback(const char* ip, int port, unsigned char* data, int size)
{
    remove_callback(ID_CONNECTION_REQUEST_ACCEPTED);
    remove_callback(ID_ALREADY_CONNECTED);
    remove_callback(ID_CONNECTION_ATTEMPT_FAILED);
    printf("ip is %s\n", ip);
    printf("port is %d\n", port);
    printf("data is %s\n", (char*)data);
    printf("size is %d\n", size);
	
	//另一端主动通知连接断开的消息
    regist_callback(ID_DISCONNECTION_NOTIFICATION, &peer_shutdown_callback);
    //网络阻塞情况，造成心跳异常而出现的被动连接异常消息
	regist_callback(ID_CONNECTION_LOST, &peer_shutdown_callback);

    char test_msg[] = "helloworld";
    regist_callback(ID_USER_MESSAGE_TEST, &send_callback);
    send_peer_message(ip, port, ID_USER_MESSAGE_TEST, test_msg, sizeof(test_msg));
}


void conn_fail_callback(const char* ip, int port, unsigned char* data, int size)
{
    remove_callback(ID_CONNECTION_REQUEST_ACCEPTED);
    remove_callback(ID_ALREADY_CONNECTED);
    remove_callback(ID_CONNECTION_ATTEMPT_FAILED);

    printf("connect fail\n");
}

void nat_punch_succ_callback(const char* ip, int port, unsigned char* data, int size)
{
    remove_punch_callback();
    printf("nat succ\n");
    regist_callback(ID_CONNECTION_REQUEST_ACCEPTED, &conn_succ_callback);
    regist_callback(ID_ALREADY_CONNECTED, &conn_succ_callback);
    regist_callback(ID_CONNECTION_ATTEMPT_FAILED, &conn_fail_callback);
    connect_peer_addr(ip, port);
}

void nat_punch_fail_callback(const char* ip, int port, unsigned char* data, int size)
{
    remove_punch_callback();
    printf("nat fail\n");
}

void* send_message_thread(void* args)
{
    sleep(2);

    string guid;
    cout << "input guid:"<< endl;
    cin >> guid;
    punch_peer(guid.c_str(), &nat_punch_succ_callback, &nat_punch_fail_callback);
}

int main(int argc, char* argv[])
{
    init_engine();

    pthread_create(&stop_pid, NULL, &send_message_thread, NULL);

    start_engine();

    pthread_join(stop_pid, NULL);


    return 0;
}
