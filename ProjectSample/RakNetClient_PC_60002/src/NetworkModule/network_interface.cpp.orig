#include "network_interface.h"
#include "network_module.h"
#include "network_module_namespace.h"
#include "Common/concurrent.h"
#include <stdio.h>

USING_NAMESPACE_NETWORK_MODULE
static Network_module* g_engine = NULL;

INIT_ENGINE_RESULT init_engine()
{
    g_engine = new Network_module;

    if (g_engine->init_log(MODULE_NAME, LOG_PATH, LOG_LEVEL) != Synchronized::success)
    {
        return INIT_ENGINE_LOG_ERROR;
    }

    return INIT_ENGINE_SUCC;
}

START_ENGINE_RESULT start_engine()
{
    if (!g_engine)
    {
        return START_ENGINE_NOT_INIT;
    }

    g_engine->run();
    return START_ENGINE_PROCESS;
}

void stop_engine()
{
    g_engine->stop_engine();
    delete g_engine;
    g_engine = NULL;
}

REGIST_CALLBACK_RESULT regist_callback(int identify, Fun_p fp)
{
    if (!g_engine)
    {
        return REGIST_CALLBACK_NOT_INIT;
    }

    g_engine->regist_message_callback(identify, fp);
    return REGIST_CALLBACK_SUCC;
}

REMOVE_CALLBACK_RESULT remove_callback(int identify)
{
    if (!g_engine)
    {
        return REMOVE_CALLBACK_NOT_INIT;
    }

    g_engine->remove_message_callback(identify);
    return REMOVE_CALLBACK_SUCC;
}

const char* get_local_guid()
{
    if (!g_engine)
    {
        return NULL;
    }

    return g_engine->get_local_guid().c_str();
}

PUNCH_PEER_RESULT punch_peer(const char* guid, Fun_p succ_fp, Fun_p fail_fp)
{
    if (!g_engine)
    {
        return PUNCH_PEER_NOT_INIT;
    }

    g_engine->regist_punch_callback(succ_fp, fail_fp);
    g_engine->punch_client(guid);
    return PUNCH_PEER_SUCC;
}

void remove_punch_callback()
{
	if (!g_engine)
	{
		return;
	}

	g_engine->remove_punch_callback();
}

void connect_peer_addr(const char *ip, int port)
{
    if (!g_engine)
    {
        return;
    }

    g_engine->connect_client(ip, port);
}

void send_peer_message(const char* ip, int port, int identify, const char* data, int size)
{
    if (!g_engine)
    {
        return;
    }

    g_engine->send_client_message(ip, port, identify, data, size);
}

void send_server_message(int identify, const char* data, int size)
{
    if (!g_engine)
    {
        return;
    }

    g_engine->send_server_message(identify, data, size);
}

